# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nrYI6AIUK5Ru9I-IuJ7i37A2ECi183r0
"""

import pandas as pd
import matplotlib.pyplot as plt

df = pd.read_csv("QueryResults.csv", names= ['Date','Tag','Post'], header= 0)

df.head()

df.tail()

df.count()

"""If we .count() the entries in each column, we can see how many months of entries exist per programming language.

Challenge: How many months of data exist per language? Which langugage has fewest months with an entry?

"""

df.groupby('Tag').count()

"""Challenge: Calculate the total number of post per language. Which programming langugae has had the highest number of post of all time"""

df.groupby('Tag')['Post'].sum()

"""#Data Cleaning: Working with Timestamp


"""

#both ways it work the same
df.Date[13]
df['Date'][1]

# the data type of date column is str which is not handy to handle
type(df.Date[13])

# We will convert this and to convert we will use to_Datetime() from pandas
df.Date = pd.to_datetime(df.Date)
type(df.Date[13])
df.head()

"""#Data Manipulation: Pivoting DataFrames

In pandas we can user pivot function. It is basicaly Transpose. Lets give it a try
"""

test_df = pd.DataFrame({'Age' :['Young','Young','Young','Young','Old','Old','Old','Old'],
                       'Actor' : ['Jack','Rose','Peter','Jasmine','Jack','Rose','Peter','Jasmine'],
                       'Collection' : [200,450,320,550,444,780,230,0]})
print(test_df)

pivoted_test_df = test_df.pivot(index = 'Age', columns = 'Actor', values = 'Collection')
print(pivoted_test_df)

"""# Mini Challenge

1. Can you pivot the df DataFrame so that each row is a date and each column is a programming language? Store the result under a variable called reshaped_df.

2. Examine the dimensions of the reshaped DataFrame. How many rows does it have? How many columns?

3. Examine the head and the tail of the DataFrame. What does it look like?

4. Print out the column names.

5. Count the number of entries per column.
"""

df.head()
reshaped_df = df.pivot(index='Date', columns='Tag', values='Post')
print(reshaped_df)

reshaped_df.shape

reshaped_df.head()

reshaped_df.columns

reshaped_df.count()

reshaped_df.isna()

reshaped_df.fillna(0,inplace=True)

reshaped_df.head()

reshaped_df.isna().values.any()

"""#Data Visualization with Matplotlib

There are many different libraries in Python to help us create charts and graphs. Matplotlib is an incredibly popular one and it works beautifully in combination with Pandas.

###Styling the Chart

Let's look at a couple of methods that will help us style our chart:

.figure() - allows us to resize our chart

.xticks() - configures our x-axis

.yticks() - configures our y-axis

.xlabel() - add text to the x-axis

.ylabel() - add text to the y-axis

.ylim() - allows us to set a lower and upper bound

###Smoothing out Time-Series Data

A useful technique to make a trend apparent is to smooth out the observations by taking an average.

A rolling mean (also known as a moving average) calculates the average of a set of data points over a specified period of time, and then "rolls" that period forward.

Here's how it works:

1. You define a "window" or a period (e.g., 3 months, 12 months).
2. The rolling mean is calculated for the first window of data.
3. Then, the window slides forward by one period, and the mean is calculated again for the new window.
4. This process continues until the end of the time series data.
What it does in time series:

Smooths out fluctuations: By averaging over a period, the rolling mean reduces the impact of short-term ups and downs, making it easier to see the underlying trend in the data.
1. Identifies trends: The smoothed line of the rolling mean can highlight long-term trends that might be obscured by noise in the original data.
2. Helps with forecasting: Rolling means can be used as a simple forecasting method, assuming that the future will be similar to the recent past.
"""

roll_df = reshaped_df.rolling(window=6).mean()
roll_df.head(10)
plt.figure(figsize=(16,10))
plt.xticks(fontsize=14)
plt.yticks(fontsize=14)
plt.xlabel('Date', fontsize=14)
plt.ylabel('Number of Posts', fontsize=14)
plt.ylim(0,35000)
# plt.plot(reshaped_df.index, reshaped_df.java)
# plt.plot(reshaped_df.index, reshaped_df.python)
# plt.plot(reshaped_df)
for column in roll_df.columns:
  plt.plot(roll_df.index, roll_df[column], linewidth=3, label = roll_df[column].name)
plt.legend(fontsize=15)
plt.show()